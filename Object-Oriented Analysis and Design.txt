Welcome to object oriented analysis and design.
After watching this video,
you will be able to
explain what are objects and classes are.
Describe the purpose of a class diagram and explain
object-oriented design in
relation to software architecture.
Object oriented analysis and design,
or OOAD for short,
is an approach for analyzing and
designing a software system when
the system will use object
oriented programming languages to develop it.
Before we discuss OOAD,
let's learn a little more about
object oriented programming in
languages like Java or C plus plus or Python.
At the heart of OOAD are objects.
Objects contain data and they also have
behaviors that prescribe the actions the object can take.
I could create an object,
for example, that represents a patient.
Let's say that patient's name is Nia Patel
and Nia needs to cancel an appointment she made.
Before creating Nia, however,
we must first create
a generic version of a patient object.
The generic version of an object is called a class.
Let's discuss classes next
before we discuss more about Nia.
Specific objects, also called instances,
are created from classes which are
blueprints or templates for an object.
From our previous example,
considering Nia Patel, Nia
would be an instance of the patient class.
The class contains the objects,
generic and attributes, the properties and methods,
but it is only when the object is created,
which is called instantiation inside the code that
these generic attributes are set to particular values.
The patient class might have a variable called LastName,
which is a property but does not
specify what that LastName is.
Lastname is a placeholder until
the object is created and assigned a name.
Once the object has been instantiated,
its methods can be called to
make the object perform some action,
such as making or canceling and appointment.
OOAD is used for a system that can be
broken down into objects that interact with each other.
In this way, multiple developers can work on
different aspects of the application at the same time.
As noted earlier, visual UML diagrams can be created
that show both the static structure
and dynamic behavior of a system.
We've seen a couple of examples of
behavioral UML diagrams all ready.
Let's look at a structural UML diagram
called a class diagram next.
Now that we know what classes are.
This is an example of a class diagram.
Class diagrams are commonly used to communicate
a software system structure in OOAD.
The class diagram shows how the class is in
an object oriented design relate to one another.
Each box represents a class and shows its attributes.
Recall that an object's attributes
are both its properties
or its data and it's available actions called methods.
A class diagram also shows
the relationships between classes.
A subclass is said to
inherit its parent class attributes,
meaning it has the same properties
and methods as the parent class,
but also may add additional properties and methods.
In this diagram, the nurse,
doctor and technician classes are sub-classes of
medical personnel and the specialist class
is a subclass of the doctor class.
This means that doctors can do
anything medical personnel can do,
and specialists can do anything a doctor can do.
In this video, you learned
that object oriented analysis and design is
the process of planning a software system
based on the behaviors of interacting objects.
Objects contain data, and they also have
behaviors that prescribe the actions the object can take.
Classes are blueprints for objects.
A class diagram is
a structural UML diagram that
shows the relationship between objects.